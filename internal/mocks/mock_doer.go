// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fedoroko/gophermart/internal/storage (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	orders "github.com/fedoroko/gophermart/internal/orders"
	users "github.com/fedoroko/gophermart/internal/users"
	withdrawals "github.com/fedoroko/gophermart/internal/withdrawals"
	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepo) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepo)(nil).Close))
}

// OrderCreate mocks base method.
func (m *MockRepo) OrderCreate(arg0 context.Context, arg1 *orders.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderCreate indicates an expected call of OrderCreate.
func (mr *MockRepoMockRecorder) OrderCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderCreate", reflect.TypeOf((*MockRepo)(nil).OrderCreate), arg0, arg1)
}

// OrdersRestore mocks base method.
func (m *MockRepo) OrdersRestore(arg0 context.Context) ([]*orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersRestore", arg0)
	ret0, _ := ret[0].([]*orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersRestore indicates an expected call of OrdersRestore.
func (mr *MockRepoMockRecorder) OrdersRestore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersRestore", reflect.TypeOf((*MockRepo)(nil).OrdersRestore), arg0)
}

// OrdersUpdate mocks base method.
func (m *MockRepo) OrdersUpdate(arg0 context.Context, arg1 []orders.QueueOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrdersUpdate indicates an expected call of OrdersUpdate.
func (mr *MockRepoMockRecorder) OrdersUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersUpdate", reflect.TypeOf((*MockRepo)(nil).OrdersUpdate), arg0, arg1)
}

// SessionBalanceCheck mocks base method.
func (m *MockRepo) SessionBalanceCheck(arg0 context.Context, arg1 string) (*users.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionBalanceCheck", arg0, arg1)
	ret0, _ := ret[0].(*users.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionBalanceCheck indicates an expected call of SessionBalanceCheck.
func (mr *MockRepoMockRecorder) SessionBalanceCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionBalanceCheck", reflect.TypeOf((*MockRepo)(nil).SessionBalanceCheck), arg0, arg1)
}

// SessionCheck mocks base method.
func (m *MockRepo) SessionCheck(arg0 context.Context, arg1 string) (*users.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionCheck", arg0, arg1)
	ret0, _ := ret[0].(*users.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionCheck indicates an expected call of SessionCheck.
func (mr *MockRepoMockRecorder) SessionCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionCheck", reflect.TypeOf((*MockRepo)(nil).SessionCheck), arg0, arg1)
}

// SessionKill mocks base method.
func (m *MockRepo) SessionKill(arg0 context.Context, arg1 *users.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionKill", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SessionKill indicates an expected call of SessionKill.
func (mr *MockRepoMockRecorder) SessionKill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionKill", reflect.TypeOf((*MockRepo)(nil).SessionKill), arg0, arg1)
}

// UserCreate mocks base method.
func (m *MockRepo) UserCreate(arg0 context.Context, arg1 *users.TempUser) (*users.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", arg0, arg1)
	ret0, _ := ret[0].(*users.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockRepoMockRecorder) UserCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockRepo)(nil).UserCreate), arg0, arg1)
}

// UserExists mocks base method.
func (m *MockRepo) UserExists(arg0 context.Context, arg1 *users.TempUser) (*users.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", arg0, arg1)
	ret0, _ := ret[0].(*users.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockRepoMockRecorder) UserExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockRepo)(nil).UserExists), arg0, arg1)
}

// UserOrders mocks base method.
func (m *MockRepo) UserOrders(arg0 context.Context, arg1 *users.User) ([]*orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOrders", arg0, arg1)
	ret0, _ := ret[0].([]*orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOrders indicates an expected call of UserOrders.
func (mr *MockRepoMockRecorder) UserOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOrders", reflect.TypeOf((*MockRepo)(nil).UserOrders), arg0, arg1)
}

// UserWithdrawals mocks base method.
func (m *MockRepo) UserWithdrawals(arg0 context.Context, arg1 *users.User) ([]*withdrawals.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserWithdrawals", arg0, arg1)
	ret0, _ := ret[0].([]*withdrawals.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserWithdrawals indicates an expected call of UserWithdrawals.
func (mr *MockRepoMockRecorder) UserWithdrawals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserWithdrawals", reflect.TypeOf((*MockRepo)(nil).UserWithdrawals), arg0, arg1)
}

// WithdrawalCreate mocks base method.
func (m *MockRepo) WithdrawalCreate(arg0 context.Context, arg1 *withdrawals.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawalCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawalCreate indicates an expected call of WithdrawalCreate.
func (mr *MockRepoMockRecorder) WithdrawalCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawalCreate", reflect.TypeOf((*MockRepo)(nil).WithdrawalCreate), arg0, arg1)
}
